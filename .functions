#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
		printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
		# print a newline unless we’re piping the output to another program
		if [ -t 1 ]; then
			echo ""; # newline
			fi;
	}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
		perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
		# print a newline unless we’re piping the output to another program
		if [ -t 1 ]; then
			echo ""; # newline
			fi;
	}

# Get a character’s Unicode code point
function codepoint() {
		perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
		# print a newline unless we’re piping the output to another program
		if [ -t 1 ]; then
			echo ""; # newline
			fi;
	}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}



# ---------------------------------------------------
# Personnal functions

get_repo_revision(){
    local url=$1
    eval "svn info $url | grep Revision | awk '{print $2}'"
    # echo $revision
}

copy_and_mkdir()
{
    local src=$1
    local target=$2

    if [ ! -d `dirname $target` ] then
        mkdir -m 755 -p ${dirname $target}
    fi
    cp -vRfp $src $target

    # exit 0
}

# Symfony2 project Harcore cache clearing
sym-refresh(){
    proj_root=$1
    if [ ! -d `dirname $proj_root` ] then
        $proj_root="."
    fi

    cd $proj_root
    app/console cache:clear
    sudo chmod -Rv 777 app/cache
    sudo chown dev1:dev1 -Rv app/cache
    sudo chmod -Rv 777 app/logs
    sudo chown dev1:dev1 -Rv app/logs
    # rm -rv ./web/static/css/
    # rm -rv ./web/static/js/
    # mkdir -v web/static/css
    # mkdir -v web/static/js
    sudo chown dev1:dev1 -Rv web/static
    sudo chmod 777 -Rv web/static
    # sudo php app/console assetic:dump --env=dev --no-debug
}



function hgrep {
   history | grep $1
}

function ursync() {
	if ($1=="BLACKBOX") then
		rsync -urv /Users//$2/Projects/* /Volumes/BLACKBOX/Projects/;
	else
		echo $1;
		# rsync -urv /Users/stephanevasseur/Sites/* /Volumes/BLACKBOX/Projets/
	fi
}


function colorpicker {
	# Show all the colours of the rainbow, should be run under bash
	for STYLE in 0 1 2 3 4 5 6 7; do
	  for FG in 30 31 32 33 34 35 36 37; do
	    for BG in 40 41 42 43 44 45 46 47; do
	      CTRL="\033[${STYLE};${FG};${BG}m"
	      echo -en "${CTRL}"
	      echo -n "${STYLE};${FG};${BG}"
	      echo -en "\033[0m"
	    done
	    echo ""
	  done
	  echo ""
	done
	# Reset
	echo -e "\033[0m"
}

# PYTHON PROJECT
function setup_python_mysqldb(){
  # cd /opt/local/var/run/mysql5/
  # cd MySQL-python-1.2.3
  DIRECTORY=$1
  # python setup.py install
  # sudo port install MySQL-python
  sudo port install MySQLDb
  sudo ln -s /usr/local/mysql/bin/* /usr/bin
  cd ${DIRECTORY}
  python setup.py install
  # which mysql_config5
  sudo ln -s /Applications/MAMP/tmp/mysql/mysql.sock /opt/local/var/run/mysql5/mysql.sock
  sudo ln -s /opt/local/bin/mysql_config5 /opt/local/bin/mysql_config
  python setup.py install
  echo "tcheck mysql is running"
  sudo /opt/local/share/mysql5/mysql/mysql.server start
  sudo mysqladmin5 -u root -p ping
}

# RUBY / RAILS ENVIRONMENT

# sudo ln -s /usr/bin/gem1.8   /usr/bin/gem
# sudo ln -s /usr/bin/gem1.8.8 /usr/bin/gem


# /etc/bashrc

# System wide functions and aliases
# Environment stuff goes in /etc/profile

# are we an interactive shell?
# if [ "$PS1" ]; then
#     if [ -x /usr/bin/tput ]; then
#       if [ "x`tput kbs`" != "x" ]; then 
# 	# We can't do this with "dumb" terminal
#         stty erase `tput kbs`
#       elif [ -x /usr/bin/wc ]; then
#         if [ "`tput kbs|wc -c `" -gt 0 ]; then 
# 	# We can't do this with "dumb" terminal
#           stty erase `tput kbs`
#         fi
#       fi
#     fi
#     case $TERM in
# 	xterm*)
# 	    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
# 	    ;;
# 	*)
# 	    ;;
#     esac
#     [ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\u@\h \W]\\$ "
#     
#     if [ "x$SHLVL" != "x1" ]; then # We're not a login shell
#         for i in /etc/profile.d/*.sh; do
# 	    if [ -x $i ]; then
# 	        . $i
# 	    fi
# 	done
#     fi
# fi

